/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

&sk {
    quick-release;
    release-after-ms = <2000>;
};

/ {
    combos {
        compatible = "zmk,combos";

        to_home {
            bindings = <&to 0>;
            key-positions = <0 1>;
            require-prior-idle-ms = <500>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <11 23>;
            layers = <0 1 2>;
            require-prior-idle-ms = <75>;
        };

        l_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <20 32>;
            layers = <0 1 2>;
            require-prior-idle-ms = <75>;
        };

        r_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <21 33>;
            layers = <0 1 2>;
            require-prior-idle-ms = <75>;
        };

        l_bracket2 {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <2 3>;
            layers = <7 8>;
            require-prior-idle-ms = <130>;
        };

        r_bracket2 {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <3 4>;
            layers = <7 8>;
            require-prior-idle-ms = <130>;
        };

        l_paren {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <14 15>;
            layers = <7 8>;
            require-prior-idle-ms = <130>;
        };

        r_paren {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <15 16>;
            layers = <7 8>;
            require-prior-idle-ms = <130>;
        };

        l_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <26 27>;
            layers = <7 8>;
            require-prior-idle-ms = <130>;
        };

        r_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <27 28>;
            layers = <7 8>;
            require-prior-idle-ms = <130>;
        };

        auto_cap {
            bindings = <&auto_cap>;
            key-positions = <37 40>;
            layers = <0 2 1>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <18 19>;
            layers = <0 1 2>;
            require-prior-idle-ms = <75>;
        };

        num2_layer {
            bindings = <&mo 10>;
            key-positions = <39 38>;
        };
    };

    behaviors {
        hrm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <240>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            flavor = "balanced";
            hold-trigger-on-release;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <140>;
        };

        hrm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <240>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <140>;
        };

        capsword_caps: capsword_caps {
            compatible = "zmk,behavior-mod-morph";
            label = "CAPSWORD_CAPSLOCK";
            bindings = <&caps_word>, <&kp CAPS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        out_tog_usb: output_toggle {
            compatible = "zmk,behavior-mod-morph";
            label = "OUTPUT-TOGGLE_OUTPUT-USB";
            bindings = <&out OUT_TOG>, <&out OUT_USB>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        btn: button_layer_left {
            compatible = "zmk,behavior-hold-tap";
            label = "BUTTON_LAYER_LEFT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <120>;
            quick-tap-ms = <175>;
        };

        to_base: to_base {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_TO_BASE";
            #binding-cells = <0>;
            bindings = <&none>, <&to 0>;
        };

        to_extra: to_extra {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_TO_EXTRA";
            #binding-cells = <0>;
            bindings = <&none>, <&to 1>;
        };

        to_tap: to_tap {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_TO_TAP_LAYER";
            #binding-cells = <0>;
            bindings = <&none>, <&to 2>;
        };

        to_nav: to_nav {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_TO_NAV";
            #binding-cells = <0>;
            bindings = <&none>, <&to 4>;
        };

        to_mouse: to_mouse {
            compatible = "zmk,behavior-tap-dance";
            label = "TO_MOUSE";
            #binding-cells = <0>;
            bindings = <&none>, <&to 5>;
        };

        to_media: to_media {
            compatible = "zmk,behavior-tap-dance";
            label = "TO_MEDIA";
            #binding-cells = <0>;
            bindings = <&none>, <&to 6>;
        };

        to_num: to_num {
            compatible = "zmk,behavior-tap-dance";
            label = "TO_NUM";
            #binding-cells = <0>;
            bindings = <&none>, <&to 7>;
        };

        to_sym: to_sym {
            compatible = "zmk,behavior-tap-dance";
            label = "TO_SYM";
            #binding-cells = <0>;
            bindings = <&none>, <&to 8>;
        };

        to_func: to_func {
            compatible = "zmk,behavior-tap-dance";
            label = "TO_FUNC";
            #binding-cells = <0>;
            bindings = <&none>, <&to 9>;
        };

        plus_equal: plus_equal {
            compatible = "zmk,behavior-mod-morph";
            label = "PLUS_EQUAL";
            bindings = <&kp PLUS>, <&kp EQUAL>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        under_minus: under_minus {
            compatible = "zmk,behavior-mod-morph";
            label = "UNDER_MINUS";
            bindings = <&kp UNDER>, <&kp KP_MINUS>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        sqt_under: sqt_under {
            compatible = "zmk,behavior-mod-morph";
            label = "SQT_UNDER";
            bindings = <&kp SINGLE_QUOTE>, <&kp UNDER>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        minus_dqt: minus_dqt {
            compatible = "zmk,behavior-mod-morph";
            label = "MINUS_DQT";
            bindings = <&kp MINUS>, <&kp DOUBLE_QUOTES>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        fslash_lt: fslash_lt {
            compatible = "zmk,behavior-mod-morph";
            label = "FSLASH_LT";
            bindings = <&kp SLASH>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        comma_question: comma_question {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUESTION";
            bindings = <&kp COMMA>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        btn2: btn_layer_right {
            compatible = "zmk,behavior-hold-tap";
            label = "BTN_LAYER_RIGHT";
            bindings = <&mo>, <&fslash_lt>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <120>;
            quick-tap-ms = <175>;
        };

        lt_bspc: lt_bspc {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            quick-tap-ms = <165>;
            tapping-term-ms = <200>;
        };

        lt_del: lt_del {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            quick-tap-ms = <165>;
            tapping-term-ms = <200>;
        };
    };

    macros {
        comma_spc: comma_spc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&comma_question &kp SPACE>;
            label = "COMMA_SPC";
        };

        auto_cap: comma_stckyshft {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE &sk LEFT_SHIFT>;
            label = "COMMA_STCKYSHFT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -------------------------------GRAPHITE------------------------------------------
            // |   `   |  B  |  L  |  D  |  W  |  Z  |   |  '  |  F   |  O  |  U  |  J  |  ;   |
            // |cw_caps|  N  |  R  |  T  |  S  |  G  |   |  Y  |  H   |  A  |  E  |  I  |  ,   |
            // | skSHFT|  Q  |  X  |  M  |  C  |  V  |   |  K  |  P   |  .  |  -  |  /  |  \   |
            //                    | ESC | SPC | TAB |   | ENT | BKSP | DEL |

            bindings = <
&kp GRAVE       &kp B          &kp L          &kp D           &kp W           &kp Z        &sqt_under   &kp F            &kp O             &kp U          &kp J          &kp SEMI
&kp LC(BSPC)    &hrm_l LGUI N  &hrm_l LALT R  &hrm_l LCTRL T  &hrm_l LSHFT S  &kp G        &kp Y        &hrm_r RSHFT H   &hrm_r RCTRL A    &hrm_r LALT E  &hrm_r LGUI I  &comma_question
&sk LEFT_SHIFT  &btn 3 Q       &kp X          &kp M           &kp C           &kp V        &kp K        &kp P            &kp PERIOD        &minus_dqt     &btn2 3 FSLH   &kp BACKSLASH
                                              &lt 6 ESC       &lt 4 SPACE     &lt 5 TAB    &lt 8 ENTER  &lt_bspc 7 BSPC  &lt_del 9 DELETE
            >;
        };

        extra {
            bindings = <
&trans  &kp Q     &kp W  &kp E   &kp R   &kp T     &kp Y   &kp U           &kp I           &kp O          &kp P                  &trans
&trans  &kp A     &kp S  &kp D   &kp F   &kp G     &kp H   &hrm_r LSHFT J  &hrm_r LCTRL K  &hrm_r LALT L  &hrm_r LGUI SEMICOLON  &trans
&trans  &btn 3 Z  &kp X  &kp C   &kp V   &kp B     &kp N   &kp M           &kp COMMA       &kp PERIOD     &btn 3 SLASH           &trans
                         &trans  &trans  &trans    &trans  &trans          &trans
            >;

            label = "qwerty_layout";
        };

        tap {
            bindings = <
&trans  &kp B  &kp L  &kp D   &kp W   &kp Z     &sqt_under  &kp F   &kp O       &kp U       &kp J       &trans
&trans  &kp N  &kp R  &kp T   &kp S   &kp G     &kp Y       &kp H   &kp A       &kp E       &kp I       &trans
&trans  &kp Q  &kp X  &kp M   &kp C   &kp V     &kp K       &kp P   &kp PERIOD  &minus_dqt  &fslash_lt  &trans
                      &trans  &trans  &trans    &trans      &trans  &trans
            >;

            label = "TAP_ONLY";
        };

        button {
            bindings = <
&none  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(LS(Z))    &kp LC(LS(Z))  &kp LC(V)  &kp LC(C)  &kp LC(X)  &kp LC(Z)  &none
&none  &kp LGUI   &kp LALT   &kp LCTRL  &kp LSHFT  &none            &none          &kp LSHFT  &kp LCTRL  &kp LALT   &kp LGUI   &none
&none  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(LS(Z))    &kp LC(LS(Z))  &kp LC(V)  &kp LC(C)  &kp LC(X)  &kp LC(Z)  &none
                             &none      &none      &none            &none          &none      &none
            >;
        };

        nav {
            bindings = <
&bootloader  &sys_reset  &to_tap   &to_extra  &to_base   &none    &kp LC(LS(Z))   &kp LC(V)  &kp LC(C)      &kp LC(X)    &kp LC(Z)  &none
&none        &kp LGUI    &kp LALT  &kp LCTRL  &kp LSHFT  &none    &capsword_caps  &kp LEFT   &kp DOWN       &kp UP       &kp RIGHT  &none
&none        &none       &kp RALT  &to_num    &none      &none    &kp INSERT      &kp HOME   &kp PAGE_DOWN  &kp PAGE_UP  &kp END    &none
                                   &none      &none      &none    &kp ENTER       &kp BSPC   &kp DELETE
            >;
        };

        mouse {
            bindings = <
&none  &none     &to_tap   &to_extra  &to_base   &none    &kp LS(LC(Z))  &kp LC(V)       &kp LC(C)       &kp LC(X)     &kp LC(Z)        &none
&none  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none    &none          &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &none
&none  &none     &kp RALT  &to_sym    &none      &none    &none          &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &none
                           &none      &none      &none    &mkp RCLK      &mkp LCLK       &mkp MCLK
            >;
        };

        media {
            bindings = <
&none  &none     &to_tap   &to_extra  &to_base   &none    &studio_unlock  &none         &none              &none            &none         &none
&none  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none    &out_tog_usb    &kp C_PREV    &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT    &none
&none  &none     &kp RALT  &to_func   &none      &none    &bt BT_CLR      &bt BT_SEL 0  &bt BT_SEL 1       &bt BT_SEL 2     &bt BT_SEL 3  &bt BT_SEL 4
                           &none      &none      &none    &kp C_STOP      &kp C_PP      &kp C_MUTE
            >;
        };

        num {
            bindings = <
&kp GRAVE   &kp LBKT   &kp N7  &kp N8      &kp N9  &kp RBKT         &none  &to_base   &to_extra  &to_tap   &sys_reset  &bootloader
&comma_spc  &kp SEMI   &kp N4  &kp N5      &kp N6  &kp EQUAL        &none  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI    &none
&none       &kp COMMA  &kp N1  &kp N2      &kp N3  &kp BACKSLASH    &none  &none      &to_nav    &kp RALT  &none       &none
                               &kp PERIOD  &kp N0  &kp MINUS        &none  &none      &none
            >;
        };

        sym {
            bindings = <
&kp TILDE   &kp LEFT_BRACE  &kp AMPERSAND    &kp ASTERISK      &kp LPAR               &kp RIGHT_BRACE    &none  &to_base   &to_extra  &to_tap   &none     &none
&comma_spc  &kp COLON       &kp DOLLAR       &kp PERCENT       &kp CARET              &plus_equal        &none  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &none
&none       &kp LESS_THAN   &kp EXCLAMATION  &kp AT_SIGN       &kp POUND              &kp PIPE           &none  &none      &to_mouse  &kp RALT  &none     &none
                                             &kp GREATER_THAN  &kp RIGHT_PARENTHESIS  &under_minus       &none  &none      &none
            >;
        };

        func {
            bindings = <
&none  &kp F12  &kp F7  &kp F8     &kp F9     &kp PSCRN          &none  &to_base   &to_extra  &to_tap   &none     &none
&none  &kp F11  &kp F4  &kp F5     &kp F6     &kp SLCK           &none  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &none
&none  &kp F10  &kp F1  &kp F2     &kp F3     &kp PAUSE_BREAK    &none  &none      &to_media  &kp RALT  &none     &none
                        &kp K_APP  &kp SPACE  &kp TAB            &none  &none      &none
            >;
        };

        num2 {
            bindings = <
&none  &kp N1  &kp N2  &kp N3  &kp N4     &kp N5    &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &none
&none  &none   &none   &none   &kp LSHFT  &none     &none   &kp N4  &kp N5  &kp N6  &none   &none
&none  &none   &none   &none   &none      &none     &none   &kp N1  &kp N2  &kp N3  &none   &none
                       &none   &none      &none     &none   &none   &none
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
